openapi: 3.0.3
info:
  version: 'latest'
  title: e-commerce - API
  description: |
    Interact and buy whatever you want in e-commerce
security:
  - BearerAuth: []

paths:

  ## Health resources
  '/ping':
    get:
      tags:
        - Health
      summary: ping.
      operationId: ping
      responses:
        '200':
          description: pong.
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  ## Users resources
  '/products':
    get:
      tags:
        - Products
      summary: Get all products with criteria.
      operationId: getProducts
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: product_name
          in: query
          required: false
          description: Filter product by name.
          schema:
            type: string
      responses:
        '200':
          description: List of filtered products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Products
      summary: Create or update products
      operationId: crupdateProducts
      requestBody:
          description: Products to create.
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: List of filtered products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  '/products/{id}':
    get:
      tags:
        - Products
      summary: Get product by identifier
      operationId: getProductById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of filtered products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    ## response model
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    ## enum type
    Page:
      type: integer
      description: Start at 1
    PageSize:
      type: integer
      description: Cannot exceed 500
    ProductStatus:
      type: string
      enum:
        - ENABLED
        - SOLD
        -
    ## resource model
    ProductInfo:
      properties:
        name:
          type: string
        creation_datetime:
          type: string
          format: date-time
    Product:
      allOf:
        - $ref: '#/components/schemas/ProductInfo'
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/ProductStatus'
        description:
          type: string
        price:
          type: integer
        updated_datetime:
          type: string
          format: date-time
    ## exception model
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error